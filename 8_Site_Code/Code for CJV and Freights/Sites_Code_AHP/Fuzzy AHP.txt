# This is for CJV

import numpy as np
import pandas as pd
from scipy.stats import rankdata

# Alternatives-by-criteria matrix (8 sites, 4 criteria)
matrix = np.array([
    [0.156, 0.146, 0.172, 0.140],
    [0.177, 0.101, 0.307, 0.104],
    [0.070, 0.092, 0.058, 0.084],
    [0.024, 0.126, 0.047, 0.128],
    [0.121, 0.184, 0.038, 0.206],
    [0.208, 0.146, 0.152, 0.116],
    [0.025, 0.126, 0.068, 0.091],
    [0.219, 0.079, 0.159, 0.131]
])

sites = ['Site1', 'Site2', 'Site3', 'Site4', 'Site5', 'Site6', 'Site7', 'Site8']
criteria = ['C1', 'C2', 'C3', 'C4']
criteria_types = ['max', 'max', 'max', 'max'] 
weights = np.array([0.25377794, 0.35076977, 0.39287723, 0.00257506]) 

# NORMALIZATION FUNCTION
def normalize_matrix(matrix, criteria_types):
    norm_matrix = np.zeros_like(matrix, dtype=float)
    for j in range(matrix.shape[1]):
        col = matrix[:, j]
        if criteria_types[j] == 'max':
            norm_matrix[:, j] = (col - np.min(col)) / (np.max(col) - np.min(col))
        else:  # 'min'
            norm_matrix[:, j] = (np.max(col) - col) / (np.max(col) - np.min(col))
    return norm_matrix

# CALCULATE FUZZY AHP SCORES AND RANKINGS
norm_matrix = normalize_matrix(matrix, criteria_types)
overall_scores = np.dot(norm_matrix, weights)

# Rank using scipy to handle ties properly
from scipy.stats import rankdata
ranks = rankdata(-overall_scores, method='min')  # Descending order

# Display result
df_result = pd.DataFrame({
    'Fuzzy AHP Score': overall_scores,
    'Rank': ranks
}, index=sites).sort_values('Rank')

print(df_result)


# OUTPUT:

       Fuzzy AHP Score  Rank
Site2         0.665912     1
Site6         0.630460     2
Site1         0.592503     3
Site5         0.479583     4
Site8         0.431492     5
Site7         0.202276     6
Site4         0.171085     7
Site3         0.132504     8



# This is for Freight

import numpy as np
import pandas as pd
from scipy.stats import rankdata

# Alternatives-by-criteria matrix (8 sites, 4 criteria)
matrix = np.array([
    [0.089, 0.106, 0.110, 0.140],
    [0.172, 0.099, 0.291, 0.104],
    [0.206, 0.095, 0.072, 0.084],
    [0.011, 0.132, 0.061, 0.128],
    [0.128, 0.243, 0.052, 0.206],
    [0.178, 0.120, 0.178, 0.116],
    [0.000, 0.132, 0.073, 0.091],
    [0.217, 0.074, 0.163, 0.131]
])

sites = ['Site1', 'Site2', 'Site3', 'Site4', 'Site5', 'Site6', 'Site7', 'Site8']
criteria = ['C1', 'C2', 'C3', 'C4']
criteria_types = ['max', 'max', 'max', 'max'] 
weights = np.array([0.25377794, 0.35076977, 0.39287723, 0.00257506]) 

# NORMALIZATION FUNCTION
def normalize_matrix(matrix, criteria_types):
    norm_matrix = np.zeros_like(matrix, dtype=float)
    for j in range(matrix.shape[1]):
        col = matrix[:, j]
        if criteria_types[j] == 'max':
            norm_matrix[:, j] = (col - np.min(col)) / (np.max(col) - np.min(col))
        else:  # 'min'
            norm_matrix[:, j] = (np.max(col) - col) / (np.max(col) - np.min(col))
    return norm_matrix

# CALCULATE FUZZY AHP SCORES AND RANKINGS
norm_matrix = normalize_matrix(matrix, criteria_types)
overall_scores = np.dot(norm_matrix, weights)

# Rank using scipy to handle ties properly
from scipy.stats import rankdata
ranks = rankdata(-overall_scores, method='min')  # Descending order

# Display result
df_result = pd.DataFrame({
    'Fuzzy AHP Score': overall_scores,
    'Rank': ranks
}, index=sites).sort_values('Rank')

print(df_result)



# OUTPUT:

       Fuzzy AHP Score  Rank
Site2         0.646340     1
Site6         0.511443     2
Site5         0.503039     3
Site8         0.437236     4
Site3         0.317377     5
Site1         0.267027     6
Site7         0.155051     7
Site4         0.148970     8
