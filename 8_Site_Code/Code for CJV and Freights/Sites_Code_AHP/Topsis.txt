# This is for CJV

import numpy as np
import pandas as pd


# Define criteria and site names
criteria = ['C1', 'C2', 'C3', 'C4']
sites = ['Site1', 'Site2', 'Site3', 'Site4', 'Site5', 'Site6', 'Site7', 'Site8']

matrix = np.array([
    [0.156, 0.146, 0.172, 0.140],
    [0.177, 0.101, 0.307, 0.104],
    [0.070, 0.092, 0.058, 0.084],
    [0.024, 0.126, 0.047, 0.128],
    [0.121, 0.184, 0.038, 0.206],
    [0.208, 0.146, 0.152, 0.116],
    [0.025, 0.126, 0.068, 0.091],
    [0.219, 0.079, 0.159, 0.131]
])

weights = np.array([0.16376103, 0.29605439, 0.46393757, 0.076247])
impacts = ['+', '+', '+', '+']

def topsis(matrix, weights, impacts, sites, criteria):
    # Step 1: Normalize the decision matrix
    norm_matrix = matrix / np.sqrt((matrix ** 2).sum(axis=0))
    # Step 2: Multiply by weights
    weighted_matrix = norm_matrix * weights

    # Step 3: Determine ideal best and worst for each criterion
    ideal_best = np.array([
        weighted_matrix[:, j].max() if impacts[j] == '+' else weighted_matrix[:, j].min()
        for j in range(weighted_matrix.shape[1])
    ])
    ideal_worst = np.array([
        weighted_matrix[:, j].min() if impacts[j] == '+' else weighted_matrix[:, j].max()
        for j in range(weighted_matrix.shape[1])
    ])

    # Step 4: Calculate distances to ideal best and worst
    dist_best = np.sqrt(((weighted_matrix - ideal_best) ** 2).sum(axis=1))
    dist_worst = np.sqrt(((weighted_matrix - ideal_worst) ** 2).sum(axis=1))

    # Step 5: Calculate TOPSIS scores
    score = dist_worst / (dist_best + dist_worst)

    # Step 6: Ranking
    ranking = (-score).argsort().argsort() + 1


    # Prepare DataFrame for output
    df = pd.DataFrame(matrix, columns=criteria, index=sites)
    df['TOPSIS Score'] = score
    df['Rank'] = ranking
    df = df.sort_values('Rank')
    return df

# Run the analysis
result_df = topsis(matrix, weights, impacts, sites, criteria)
print(result_df)



# OUTPUT:

          C1     C2     C3     C4  TOPSIS Score  Rank
Site2  0.177  0.101  0.307  0.104      0.804183     1
Site1  0.156  0.146  0.172  0.140      0.518973     2
Site6  0.208  0.146  0.152  0.116      0.472529     3
Site8  0.219  0.079  0.159  0.131      0.456166     4
Site5  0.121  0.184  0.038  0.206      0.248225     5
Site7  0.025  0.126  0.068  0.091      0.154065     6
Site4  0.024  0.126  0.047  0.128      0.120049     7
Site3  0.070  0.092  0.058  0.084      0.095503     8




# This is for Freight

import numpy as np
import pandas as pd


# Define criteria and site names
criteria = ['C1', 'C2', 'C3', 'C4']
sites = ['Site1', 'Site2', 'Site3', 'Site4', 'Site5', 'Site6', 'Site7', 'Site8']

matrix = np.array([
    [0.089, 0.106, 0.110, 0.140],
    [0.172, 0.099, 0.291, 0.104],
    [0.206, 0.095, 0.072, 0.084],
    [0.011, 0.132, 0.061, 0.128],
    [0.128, 0.243, 0.052, 0.206],
    [0.178, 0.120, 0.178, 0.116],
    [0.000, 0.132, 0.073, 0.091],
    [0.217, 0.074, 0.163, 0.131]
])

weights = np.array([0.16376103, 0.29605439, 0.46393757, 0.076247])
impacts = ['+', '+', '+', '+']

def topsis(matrix, weights, impacts, sites, criteria):
    # Step 1: Normalize the decision matrix
    norm_matrix = matrix / np.sqrt((matrix ** 2).sum(axis=0))
    # Step 2: Multiply by weights
    weighted_matrix = norm_matrix * weights

    # Step 3: Determine ideal best and worst for each criterion
    ideal_best = np.array([
        weighted_matrix[:, j].max() if impacts[j] == '+' else weighted_matrix[:, j].min()
        for j in range(weighted_matrix.shape[1])
    ])
    ideal_worst = np.array([
        weighted_matrix[:, j].min() if impacts[j] == '+' else weighted_matrix[:, j].max()
        for j in range(weighted_matrix.shape[1])
    ])

    # Step 4: Calculate distances to ideal best and worst
    dist_best = np.sqrt(((weighted_matrix - ideal_best) ** 2).sum(axis=1))
    dist_worst = np.sqrt(((weighted_matrix - ideal_worst) ** 2).sum(axis=1))

    # Step 5: Calculate TOPSIS scores
    score = dist_worst / (dist_best + dist_worst)

    # Step 6: Ranking
    ranking = (-score).argsort().argsort() + 1


    # Prepare DataFrame for output
    df = pd.DataFrame(matrix, columns=criteria, index=sites)
    df['TOPSIS Score'] = score
    df['Rank'] = ranking
    df = df.sort_values('Rank')
    return df

# Run the analysis
result_df = topsis(matrix, weights, impacts, sites, criteria)
print(result_df)



# OUTPUT:


          C1     C2     C3     C4  TOPSIS Score  Rank
Site2  0.172  0.099  0.291  0.104      0.704899     1
Site6  0.178  0.120  0.178  0.116      0.501308     2
Site8  0.217  0.074  0.163  0.131      0.435584     3
Site5  0.128  0.243  0.052  0.206      0.347119     4
Site1  0.089  0.106  0.110  0.140      0.250844     5
Site3  0.206  0.095  0.072  0.084      0.238527     6
Site7  0.000  0.132  0.073  0.091      0.157274     7
Site4  0.011  0.132  0.061  0.128      0.143340     8