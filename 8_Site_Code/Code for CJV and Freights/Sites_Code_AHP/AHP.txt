# This is for CJV

import numpy as np
import pandas as pd
from scipy.stats import rankdata

# Alternatives matrix and data
matrix = np.array([
    [0.156, 0.146, 0.172, 0.140],
    [0.177, 0.101, 0.307, 0.104],
    [0.070, 0.092, 0.058, 0.084],
    [0.024, 0.126, 0.047, 0.128],
    [0.121, 0.184, 0.038, 0.206],
    [0.208, 0.146, 0.152, 0.116],
    [0.025, 0.126, 0.068, 0.091],
    [0.219, 0.079, 0.159, 0.131]
])
sites = ['Site1', 'Site2', 'Site3', 'Site4', 'Site5', 'Site6', 'Site7', 'Site8']
criteria = ['C1', 'C2', 'C3', 'C4']
criteria_types = ['max', 'max', 'max', 'max']
weights = np.array([0.16376103, 0.29605439, 0.46393757, 0.076247])

# Normalize matrix
def normalize_matrix(matrix, criteria_types):
    norm_matrix = np.zeros_like(matrix, dtype=float)
    for j in range(matrix.shape[1]):
        col = matrix[:, j]
        if criteria_types[j] == 'max':
            norm_matrix[:, j] = (col - np.min(col)) / (np.max(col) - np.min(col))
        else:
            norm_matrix[:, j] = (np.max(col) - col) / (np.max(col) - np.min(col))
    return norm_matrix

norm_matrix = normalize_matrix(matrix, criteria_types)
df_norm = pd.DataFrame(norm_matrix, columns=criteria, index=sites)

# Criterion-wise rankings using scipy
print("\nRanking of sites for each criterion:")
criterion_ranks = pd.DataFrame(index=sites)

for i, c in enumerate(criteria):
    col = norm_matrix[:, i]
    if criteria_types[i] == 'max':
        ranks = rankdata(-col, method='min')  # Descending rank
    else:
        ranks = rankdata(col, method='min')   # Ascending rank
    criterion_ranks[c] = ranks

print(criterion_ranks)

# AHP weighted score and overall ranking
overall_scores = np.dot(norm_matrix, weights)
overall_ranks = rankdata(-overall_scores, method='min')  # Higher score = better

df_result = pd.DataFrame({
    'AHP Score': overall_scores,
    'Rank': overall_ranks
}, index=sites).sort_values('Rank')

print("\nOverall AHP Scores and Ranking:")
print(df_result)



# OUTPUT:

Ranking of sites for each criterion:
       C1  C2  C3  C4
Site1   4   2   2   2
Site2   3   6   1   6
Site3   6   7   6   8
Site4   8   4   7   4
Site5   5   1   8   1
Site6   2   2   4   5
Site7   7   4   5   7
Site8   1   8   3   3

Overall AHP Scores and Ranking:
       AHP Score  Rank
Site2   0.666957     1
Site1   0.565870     2
Site6   0.560046     3
Site5   0.453762     4
Site8   0.401821     5
Site7   0.189474     6
Site4   0.175541     7
Site3   0.109779     8



#This is for Freight

import numpy as np
import pandas as pd
from scipy.stats import rankdata

# Alternatives matrix and data
matrix = np.array([
    [0.089, 0.106, 0.110, 0.140],
    [0.172, 0.099, 0.291, 0.104],
    [0.206, 0.095, 0.072, 0.084],
    [0.011, 0.132, 0.061, 0.128],
    [0.128, 0.243, 0.052, 0.206],
    [0.178, 0.120, 0.178, 0.116],
    [0.000, 0.132, 0.073, 0.091],
    [0.217, 0.074, 0.163, 0.131]
])

sites = ['Site1', 'Site2', 'Site3', 'Site4', 'Site5', 'Site6', 'Site7', 'Site8']
criteria = ['C1', 'C2', 'C3', 'C4']
criteria_types = ['max', 'max', 'max', 'max']
weights = np.array([0.16376103, 0.29605439, 0.46393757, 0.076247])

# Normalize matrix
def normalize_matrix(matrix, criteria_types):
    norm_matrix = np.zeros_like(matrix, dtype=float)
    for j in range(matrix.shape[1]):
        col = matrix[:, j]
        if criteria_types[j] == 'max':
            norm_matrix[:, j] = (col - np.min(col)) / (np.max(col) - np.min(col))
        else:
            norm_matrix[:, j] = (np.max(col) - col) / (np.max(col) - np.min(col))
    return norm_matrix

norm_matrix = normalize_matrix(matrix, criteria_types)
df_norm = pd.DataFrame(norm_matrix, columns=criteria, index=sites)

# Criterion-wise rankings using scipy
print("\nRanking of sites for each criterion:")
criterion_ranks = pd.DataFrame(index=sites)

for i, c in enumerate(criteria):
    col = norm_matrix[:, i]
    if criteria_types[i] == 'max':
        ranks = rankdata(-col, method='min')  # Descending rank
    else:
        ranks = rankdata(col, method='min')   # Ascending rank
    criterion_ranks[c] = ranks

print(criterion_ranks)

# AHP weighted score and overall ranking
overall_scores = np.dot(norm_matrix, weights)
overall_ranks = rankdata(-overall_scores, method='min')  # Higher score = better

df_result = pd.DataFrame({
    'AHP Score': overall_scores,
    'Rank': overall_ranks
}, index=sites).sort_values('Rank')

print("\nOverall AHP Scores and Ranking:")
print(df_result)


# OUTPUT:


Ranking of sites for each criterion:
       C1  C2  C3  C4
Site1   6   5   4   2
Site2   4   6   1   6
Site3   2   7   6   8
Site4   7   2   7   4
Site5   5   1   8   1
Site6   3   4   2   5
Site7   8   2   5   7
Site8   1   8   3   3

Overall AHP Scores and Ranking:
       AHP Score  Rank
Site2   0.650033     1
Site6   0.479498     2
Site5   0.468898     3
Site8   0.408604     4
Site1   0.270808     5
Site3   0.231071     6
Site4   0.154875     7
Site7   0.146744     8